}
pyp <- input$p0+(uniroot(eq1,c(0,input$cp))$root)
qyp <- 3*(uniroot(eq1,c(0,input$cp))$root)
ptsp <- input$p0+(uniroot(eq2,c(0,input$cp))$root)
qtsp <- 3*(uniroot(eq2,c(0,input$cp))$root)
pfu <- exp((input$N-vo)/input$l)
va <- vo - input$k*(log(pyp/input$p0))
vb <- input$N - input$l*log(ptsp)
plot_ly(x=log(p_ini),y=v_ini_ncl,type="scatter",mode="lines",name="Iso NCL",line=list(color="blue")) %>%
add_trace(y=v_ini_csl,mode="lines",name="CSL",line=list(color="red")) %>%
add_trace(x=c(log(pc),log(input$p0)),y=c(v,vo),mode="lines",line=list(color="green"),name="URL") %>%
add_trace(x=c(log(input$p0),log(pfu)),y=c(vo,vo),mode="lines",line=list(color="cyan"),name="Effective stress path") %>%
add_trace(x=c(log(input$p0),log(pyp)),y=c(vo,va),mode="lines",line=list(color="black"),name="OAB:Total stress path") %>%
add_trace(x=c(log(pyp),log(ptsp)),y=c(va,vb),mode="lines",line=list(color="black"),name="Total stress path",showlegend=F) %>%
layout(xaxis=list(title="ln p' [kPa]"),yaxis=list(title="v [-]"),
annotations=list(x=c(log(input$p0),log(pyp),log(ptsp),log(input$p0),log(pfu)),y=c(vo,va,vb,va,vo),text=c("O","A","B","C","D"),showarrow=F,xanchor="right"))
})
}
shinyApp(ui,server)
library(shiny)
library(plotly)
library(rootSolve)
ui <- fluidPage(
titlePanel("Original Cam Clay"),
sidebarLayout(
sidebarPanel(sliderInput(inputId = "cp",label = "Initial consolidation pressure [kPa]",min = 1,max = 1000,value = 200),
uiOutput("p0"),
hr(),
sliderInput(inputId = "M",label = "M",min=0.1,max=4,value = 0.95),
sliderInput(inputId = "l",label = "Lambda",min=0.1,max=1,value = 0.2),
sliderInput(inputId = "k",label = "Kappa",min=0.01,max=0.1,value = 0.04,step=0.001),
sliderInput(inputId = "N",label = "N",min=1.5,max=3,value = 2.5),
hr(),
helpText("For questions and comments please contact anil.yildiz@wsl.ch")
),
mainPanel("Isotropically Consolidated Undrained Triaxial Test",
tabsetPanel(type = "tabs",
tabPanel("q - p Plot", plotlyOutput("qpPlot")),
tabPanel("v - ln p Plot",plotlyOutput("vlnpPlot"))
)
)
)
)
server <- function(input, output,session) {
output$p0 <- renderUI({
sliderInput("p0", "Initial confining pressure [kPa]", min=1, max=input$cp, value=100)
})
output$qpPlot <- renderPlotly({
pc <- input$cp
p_ini_yield <- seq(0,pc,1)
q_ini_yield <- input$M*p_ini_yield
qy <- input$M*p_ini_yield*log(pc/p_ini_yield)
eq1 <- function(x){
(((3*x)/(input$M*(input$p0+x)))-log(input$cp/(input$p0+x)))
}
eq2 <- function(y){
3*y-(input$M*(input$p0+y))
}
pyp <- input$p0+(uniroot(eq1,c(0,input$cp))$root)
qyp <- 3*(uniroot(eq1,c(0,input$cp))$root)
ptsp <- input$p0+(uniroot(eq2,c(0,input$cp))$root)
qtsp <- 3*(uniroot(eq2,c(0,input$cp))$root)
vl <- input$l-input$k+input$N
v <- vl - input$l*log(pc)
vo <- v + input$k*log(pc/input$p0)
pfu <- exp((input$N-vo)/input$l)
qfu <- pfu*input$M
qey <- input$M*input$p0*log(pc/input$p0)
plot_ly(x=p_ini_yield,y=qy,type="scatter",mode="none",name="Yield surface",fill="tozeroy",fillcolor="rgba(0,0,0,0.2)") %>%
add_trace(y=q_ini_yield,mode="lines",name="CSL",line=list(color="rgb(256,0,0)"),fill="") %>%
add_trace(x=c(input$p0,pyp),y=c(0,qyp),mode="lines",fill="none",name="OAB: Total \nstress path",line=list(color="rgb(0,1,0)")) %>%
add_trace(x=c(pyp,ptsp),y=c(qyp,qtsp),mode="lines",fill="none",name="",showlegend=F,line=list(color="rgb(0,1,0)")) %>%
add_trace(x=c(input$p0,input$p0),y=c(0,qey),mode="lines",fill="none",name="Effective stress path",line=list(color="cyan")) %>%
add_trace(x=c(input$p0,pfu),y=c(qey,qfu),mode="lines",fill="none",name="Effective stress path",line=list(color="cyan")) %>%
layout(xaxis=list(title="p, p' [kPa]"),yaxis=list(title="q [kPa]"),autosize=T,
annotations=list(x=c(input$p0,pyp,ptsp,input$p0,pfu),y=c(0,qyp,qtsp,qey,qfu),text=c("O","A","B","C","D"),showarrow=F,xanchor="left"))
})
output$vlnpPlot <- renderPlotly({
pc <- input$cp
p_ini <- seq(0,pc,1)
vl <- input$l-input$k+input$N
v_ini_ncl <- vl - input$l*log(p_ini)
v_ini_csl <- input$N-input$l*log(p_ini)
v <- vl - input$l*log(pc)
vo <- v + input$k*log(pc/input$p0)
eq1 <- function(x){
(((3*x)/(input$M*(input$p0+x)))-log(input$cp/(input$p0+x)))
}
eq2 <- function(y){
3*y-(input$M*(input$p0+y))
}
pyp <- input$p0+(uniroot(eq1,c(0,input$cp))$root)
qyp <- 3*(uniroot(eq1,c(0,input$cp))$root)
ptsp <- input$p0+(uniroot(eq2,c(0,input$cp))$root)
qtsp <- 3*(uniroot(eq2,c(0,input$cp))$root)
pfu <- exp((input$N-vo)/input$l)
va <- vo - input$k*(log(pyp/input$p0))
vb <- input$N - input$l*log(ptsp)
plot_ly(x=log(p_ini),y=v_ini_ncl,type="scatter",mode="lines",name="Iso NCL",line=list(color="blue")) %>%
add_trace(y=v_ini_csl,mode="lines",name="CSL",line=list(color="red")) %>%
add_trace(x=c(log(pc),log(input$p0)),y=c(v,vo),mode="lines",line=list(color="green"),name="URL") %>%
add_trace(x=c(log(input$p0),log(pfu)),y=c(vo,vo),mode="lines",line=list(color="cyan"),name="Effective stress path") %>%
add_trace(x=c(log(input$p0),log(pyp)),y=c(vo,va),mode="lines",line=list(color="black"),name="OAB:Total stress path") %>%
add_trace(x=c(log(pyp),log(ptsp)),y=c(va,vb),mode="lines",line=list(color="black"),name="Total stress path",showlegend=F) %>%
layout(xaxis=list(title="ln p' [kPa]"),yaxis=list(title="v [-]"),
annotations=list(x=c(log(input$p0),log(pyp),log(ptsp),log(input$p0),log(pfu)),y=c(vo,va,vb,va,vo),text=c("O","A","B","C","D"),showarrow=F,xanchor="right"))
})
}
shinyApp(ui,server)
/**
* Copyright 2012-2017, Plotly, Inc.
* All rights reserved.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/
'use strict';
module.exports = {
segmentRE: /[MLHVQCTSZ][^MLHVQCTSZ]*/g,
paramRE: /[^\s,]+/g,
// which numbers in each path segment are x (or y) values
// drawn is which param is a drawn point, as opposed to a
// control point (which doesn't count toward autorange.
// TODO: this means curved paths could extend beyond the
// autorange bounds. This is a bit tricky to get right
// unless we revert to bounding boxes, but perhaps there's
// a calculation we could do...)
paramIsX: {
M: {0: true, drawn: 0},
L: {0: true, drawn: 0},
H: {0: true, drawn: 0},
V: {},
Q: {0: true, 2: true, drawn: 2},
C: {0: true, 2: true, 4: true, drawn: 4},
T: {0: true, drawn: 0},
S: {0: true, 2: true, drawn: 2},
// A: {0: true, 5: true},
Z: {}
},
paramIsY: {
M: {1: true, drawn: 1},
L: {1: true, drawn: 1},
H: {},
V: {0: true, drawn: 0},
Q: {1: true, 3: true, drawn: 3},
C: {1: true, 3: true, 5: true, drawn: 5},
T: {1: true, drawn: 1},
S: {1: true, 3: true, drawn: 5},
// A: {1: true, 6: true},
Z: {}
},
numParams: {
M: 2,
L: 2,
H: 1,
V: 1,
Q: 4,
C: 6,
T: 2,
S: 4,
// A: 7,
Z: 0
}
};
library(rsconnect)
setwd("C:/Users/ayildiz/Desktop/OCC2/OCC-R")
deployApp("C:/Users/ayildiz/Desktop/OCC2/OCC-R")
deployApp("C:/Users/ayildiz/Desktop/OCC2/OCC-R")
library(shiny)
library(plotly)
library(rootSolve)# This is the server logic for a Shiny web application.
# You can find out more about building applications with Shiny here:
#
# http://shiny.rstudio.com
#
library(shiny)
shinyServer(function(input, output,session) {
output$p0 <- renderUI({
sliderInput("p0", "Initial confining pressure [kPa]", min=1, max=input$cp, value=100)
})
output$qpPlot <- renderPlotly({
pc <- input$cp
p_ini_yield <- seq(0,pc,1)
q_ini_yield <- input$M*p_ini_yield
qy <- input$M*p_ini_yield*log(pc/p_ini_yield)
eq1 <- function(x){
(((3*x)/(input$M*(input$p0+x)))-log(input$cp/(input$p0+x)))
}
eq2 <- function(y){
3*y-(input$M*(input$p0+y))
}
pyp <- input$p0+(uniroot(eq1,c(0,input$cp))$root)
qyp <- 3*(uniroot(eq1,c(0,input$cp))$root)
ptsp <- input$p0+(uniroot(eq2,c(0,input$cp))$root)
qtsp <- 3*(uniroot(eq2,c(0,input$cp))$root)
vl <- input$l-input$k+input$N
v <- vl - input$l*log(pc)
vo <- v + input$k*log(pc/input$p0)
pfu <- exp((input$N-vo)/input$l)
qfu <- pfu*input$M
qey <- input$M*input$p0*log(pc/input$p0)
plot_ly(x=p_ini_yield,y=qy,type="scatter",mode="none",name="Yield surface",fill="tozeroy",fillcolor="rgba(0,0,0,0.2)") %>%
add_trace(y=q_ini_yield,mode="lines",name="CSL",line=list(color="rgb(256,0,0)"),fill="") %>%
add_trace(x=c(input$p0,pyp),y=c(0,qyp),mode="lines",fill="none",name="OAB: Total \nstress path",line=list(color="rgb(0,1,0)")) %>%
add_trace(x=c(pyp,ptsp),y=c(qyp,qtsp),mode="lines",fill="none",name="",showlegend=F,line=list(color="rgb(0,1,0)")) %>%
add_trace(x=c(input$p0,input$p0),y=c(0,qey),mode="lines",fill="none",name="Effective stress path",line=list(color="cyan")) %>%
add_trace(x=c(input$p0,pfu),y=c(qey,qfu),mode="lines",fill="none",name="Effective stress path",line=list(color="cyan")) %>%
layout(xaxis=list(title="p, p' [kPa]"),yaxis=list(title="q [kPa]"),autosize=T,
annotations=list(x=c(input$p0,pyp,ptsp,input$p0,pfu),y=c(0,qyp,qtsp,qey,qfu),text=c("O","A","B","C","D"),showarrow=F,xanchor="left"))
})
output$vlnpPlot <- renderPlotly({
pc <- input$cp
p_ini <- seq(0,pc,1)
vl <- input$l-input$k+input$N
v_ini_ncl <- vl - input$l*log(p_ini)
v_ini_csl <- input$N-input$l*log(p_ini)
v <- vl - input$l*log(pc)
vo <- v + input$k*log(pc/input$p0)
eq1 <- function(x){
(((3*x)/(input$M*(input$p0+x)))-log(input$cp/(input$p0+x)))
}
eq2 <- function(y){
3*y-(input$M*(input$p0+y))
}
pyp <- input$p0+(uniroot(eq1,c(0,input$cp))$root)
qyp <- 3*(uniroot(eq1,c(0,input$cp))$root)
ptsp <- input$p0+(uniroot(eq2,c(0,input$cp))$root)
qtsp <- 3*(uniroot(eq2,c(0,input$cp))$root)
pfu <- exp((input$N-vo)/input$l) %>%
va <- vo - input$k*(log(pyp/input$p0))
vb <- input$N - input$l*log(ptsp)
plot_ly(x=log(p_ini),y=v_ini_ncl,type="scatter",mode="lines",name="Iso NCL",line=list(color="blue")) %>%
add_trace(y=v_ini_csl,mode="lines",name="CSL",line=list(color="red")) %>%
add_trace(x=c(log(pc),log(input$p0)),y=c(v,vo),mode="lines",line=list(color="green"),name="URL") %>%
add_trace(x=c(log(input$p0),log(pfu)),y=c(vo,vo),mode="lines",line=list(color="cyan"),name="Effective stress path") %>%
add_trace(x=c(log(input$p0),log(pyp)),y=c(vo,va),mode="lines",line=list(color="black"),name="OAB:Total stress path") %>%
add_trace(x=c(log(pyp),log(ptsp)),y=c(va,vb),mode="lines",line=list(color="black"),name="Total stress path",showlegend=F) %>%
layout(xaxis=list(title="ln p' [kPa]"),yaxis=list(title="v [-]"),
annotations=list(x=c(log(input$p0),log(pyp),log(ptsp),log(input$p0),log(pfu)),y=c(vo,va,vb,va,vo),text=c("O","A","B","C","D"),showarrow=F,xanchor="right"))
})
})
library(shiny)
library(plotly)
library(rootSolve)
ui <- fluidPage(
titlePanel("Original Cam Clay"),
sidebarLayout(
sidebarPanel(sliderInput(inputId = "cp",label = "Initial consolidation pressure [kPa]",min = 1,max = 1000,value = 200),
uiOutput("p0"),
hr(),
sliderInput(inputId = "M",label = "M",min=0.1,max=4,value = 0.95),
sliderInput(inputId = "l",label = "Lambda",min=0.1,max=1,value = 0.2),
sliderInput(inputId = "k",label = "Kappa",min=0.01,max=0.1,value = 0.04,step=0.001),
sliderInput(inputId = "N",label = "N",min=1.5,max=3,value = 2.5),
hr(),
helpText("For questions and comments please contact anil.yildiz@wsl.ch")
),
mainPanel("Isotropically Consolidated Undrained Triaxial Test",
tabsetPanel(type = "tabs",
tabPanel("q - p Plot", plotlyOutput("qpPlot")),
tabPanel("v - ln p Plot",plotlyOutput("vlnpPlot"))
)
)
)
)
server <- function(input, output,session) {
output$p0 <- renderUI({
sliderInput("p0", "Initial confining pressure [kPa]", min=1, max=input$cp, value=100)
})
output$qpPlot <- renderPlotly({
pc <- input$cp
p_ini_yield <- seq(0,pc,1)
q_ini_yield <- input$M*p_ini_yield
qy <- input$M*p_ini_yield*log(pc/p_ini_yield)
eq1 <- function(x){
(((3*x)/(input$M*(input$p0+x)))-log(input$cp/(input$p0+x)))
}
eq2 <- function(y){
3*y-(input$M*(input$p0+y))
}
pyp <- input$p0+(uniroot(eq1,c(0,input$cp))$root)
qyp <- 3*(uniroot(eq1,c(0,input$cp))$root)
ptsp <- input$p0+(uniroot(eq2,c(0,input$cp))$root)
qtsp <- 3*(uniroot(eq2,c(0,input$cp))$root)
vl <- input$l-input$k+input$N
v <- vl - input$l*log(pc)
vo <- v + input$k*log(pc/input$p0)
pfu <- exp((input$N-vo)/input$l)
qfu <- pfu*input$M
qey <- input$M*input$p0*log(pc/input$p0)
plot_ly(x=p_ini_yield,y=qy,type="scatter",mode="none",name="Yield surface",fill="tozeroy",fillcolor="rgba(0,0,0,0.2)") %>%
add_trace(y=q_ini_yield,mode="lines",name="CSL",line=list(color="rgb(256,0,0)"),fill="") %>%
add_trace(x=c(input$p0,pyp),y=c(0,qyp),mode="lines",fill="none",name="OAB: Total \nstress path",line=list(color="rgb(0,1,0)")) %>%
add_trace(x=c(pyp,ptsp),y=c(qyp,qtsp),mode="lines",fill="none",name="",showlegend=F,line=list(color="rgb(0,1,0)")) %>%
add_trace(x=c(input$p0,input$p0),y=c(0,qey),mode="lines",fill="none",name="Effective stress path",line=list(color="cyan")) %>%
add_trace(x=c(input$p0,pfu),y=c(qey,qfu),mode="lines",fill="none",name="Effective stress path",line=list(color="cyan")) %>%
layout(xaxis=list(title="p, p' [kPa]"),yaxis=list(title="q [kPa]"),autosize=T,
annotations=list(x=c(input$p0,pyp,ptsp,input$p0,pfu),y=c(0,qyp,qtsp,qey,qfu),text=c("O","A","B","C","D"),showarrow=F,xanchor="left"))
})
output$vlnpPlot <- renderPlotly({
pc <- input$cp
p_ini <- seq(0,pc,1)
vl <- input$l-input$k+input$N
v_ini_ncl <- vl - input$l*log(p_ini)
v_ini_csl <- input$N-input$l*log(p_ini)
v <- vl - input$l*log(pc)
vo <- v + input$k*log(pc/input$p0)
eq1 <- function(x){
(((3*x)/(input$M*(input$p0+x)))-log(input$cp/(input$p0+x)))
}
eq2 <- function(y){
3*y-(input$M*(input$p0+y))
}
pyp <- input$p0+(uniroot(eq1,c(0,input$cp))$root)
qyp <- 3*(uniroot(eq1,c(0,input$cp))$root)
ptsp <- input$p0+(uniroot(eq2,c(0,input$cp))$root)
qtsp <- 3*(uniroot(eq2,c(0,input$cp))$root)
pfu <- exp((input$N-vo)/input$l) %>%
va <- vo - input$k*(log(pyp/input$p0))
vb <- input$N - input$l*log(ptsp)
plot_ly(x=log(p_ini),y=v_ini_ncl,type="scatter",mode="lines",name="Iso NCL",line=list(color="blue")) %>%
add_trace(y=v_ini_csl,mode="lines",name="CSL",line=list(color="red")) %>%
add_trace(x=c(log(pc),log(input$p0)),y=c(v,vo),mode="lines",line=list(color="green"),name="URL") %>%
add_trace(x=c(log(input$p0),log(pfu)),y=c(vo,vo),mode="lines",line=list(color="cyan"),name="Effective stress path") %>%
add_trace(x=c(log(input$p0),log(pyp)),y=c(vo,va),mode="lines",line=list(color="black"),name="OAB:Total stress path") %>%
add_trace(x=c(log(pyp),log(ptsp)),y=c(va,vb),mode="lines",line=list(color="black"),name="Total stress path",showlegend=F) %>%
layout(xaxis=list(title="ln p' [kPa]"),yaxis=list(title="v [-]"),
annotations=list(x=c(log(input$p0),log(pyp),log(ptsp),log(input$p0),log(pfu)),y=c(vo,va,vb,va,vo),text=c("O","A","B","C","D"),showarrow=F,xanchor="right"))
})
}
shinyApp(ui,server)
library(shiny)
library(plotly)
library(rootSolve)
ui <- fluidPage(
titlePanel("Original Cam Clay"),
sidebarLayout(
sidebarPanel(sliderInput(inputId = "cp",label = "Initial consolidation pressure [kPa]",min = 1,max = 1000,value = 200),
uiOutput("p0"),
hr(),
sliderInput(inputId = "M",label = "M",min=0.1,max=4,value = 0.95),
sliderInput(inputId = "l",label = "Lambda",min=0.1,max=1,value = 0.2),
sliderInput(inputId = "k",label = "Kappa",min=0.01,max=0.1,value = 0.04,step=0.001),
sliderInput(inputId = "N",label = "N",min=1.5,max=3,value = 2.5),
hr(),
helpText("For questions and comments please contact anil.yildiz@wsl.ch")
),
mainPanel("Isotropically Consolidated Undrained Triaxial Test",
tabsetPanel(type = "tabs",
tabPanel("q - p Plot", plotlyOutput("qpPlot")),
tabPanel("v - ln p Plot",plotlyOutput("vlnpPlot"))
)
)
)
)
server <- function(input, output,session) {
output$p0 <- renderUI({
sliderInput("p0", "Initial confining pressure [kPa]", min=1, max=input$cp, value=100)
})
output$qpPlot <- renderPlotly({
pc <- input$cp
p_ini_yield <- seq(0,pc,1)
q_ini_yield <- input$M*p_ini_yield
qy <- input$M*p_ini_yield*log(pc/p_ini_yield)
eq1 <- function(x){
(((3*x)/(input$M*(input$p0+x)))-log(input$cp/(input$p0+x)))
}
eq2 <- function(y){
3*y-(input$M*(input$p0+y))
}
pyp <- input$p0+(uniroot(eq1,c(0,input$cp))$root)
qyp <- 3*(uniroot(eq1,c(0,input$cp))$root)
ptsp <- input$p0+(uniroot(eq2,c(0,input$cp))$root)
qtsp <- 3*(uniroot(eq2,c(0,input$cp))$root)
vl <- input$l-input$k+input$N
v <- vl - input$l*log(pc)
vo <- v + input$k*log(pc/input$p0)
pfu <- exp((input$N-vo)/input$l)
qfu <- pfu*input$M
qey <- input$M*input$p0*log(pc/input$p0)
plot_ly(x=p_ini_yield,y=qy,type="scatter",mode="none",name="Yield surface",fill="tozeroy",fillcolor="rgba(0,0,0,0.2)") %>%
add_trace(y=q_ini_yield,mode="lines",name="CSL",line=list(color="rgb(256,0,0)"),fill="") %>%
add_trace(x=c(input$p0,pyp),y=c(0,qyp),mode="lines",fill="none",name="OAB: Total \nstress path",line=list(color="rgb(0,1,0)")) %>%
add_trace(x=c(pyp,ptsp),y=c(qyp,qtsp),mode="lines",fill="none",name="",showlegend=F,line=list(color="rgb(0,1,0)")) %>%
add_trace(x=c(input$p0,input$p0),y=c(0,qey),mode="lines",fill="none",name="Effective stress path",line=list(color="cyan")) %>%
add_trace(x=c(input$p0,pfu),y=c(qey,qfu),mode="lines",fill="none",name="Effective stress path",line=list(color="cyan")) %>%
layout(xaxis=list(title="p, p' [kPa]"),yaxis=list(title="q [kPa]"),autosize=T,
annotations=list(x=c(input$p0,pyp,ptsp,input$p0,pfu),y=c(0,qyp,qtsp,qey,qfu),text=c("O","A","B","C","D"),showarrow=F,xanchor="left"))
})
output$vlnpPlot <- renderPlotly({
pc <- input$cp
p_ini <- seq(0,pc,1)
vl <- input$l-input$k+input$N
v_ini_ncl <- vl - input$l*log(p_ini)
v_ini_csl <- input$N-input$l*log(p_ini)
v <- vl - input$l*log(pc)
vo <- v + input$k*log(pc/input$p0)
eq1 <- function(x){
(((3*x)/(input$M*(input$p0+x)))-log(input$cp/(input$p0+x)))
}
eq2 <- function(y){
3*y-(input$M*(input$p0+y))
}
pyp <- input$p0+(uniroot(eq1,c(0,input$cp))$root)
qyp <- 3*(uniroot(eq1,c(0,input$cp))$root)
ptsp <- input$p0+(uniroot(eq2,c(0,input$cp))$root)
qtsp <- 3*(uniroot(eq2,c(0,input$cp))$root)
pfu <- exp((input$N-vo)/input$l) %>%
va <- vo - input$k*(log(pyp/input$p0))
vb <- input$N - input$l*log(ptsp)
plot_ly(x=log(p_ini),y=v_ini_ncl,type="scatter",mode="lines",name="Iso NCL",line=list(color="blue")) %>%
add_trace(y=v_ini_csl,mode="lines",name="CSL",line=list(color="red")) %>%
add_trace(x=c(log(pc),log(input$p0)),y=c(v,vo),mode="lines",line=list(color="green"),name="URL") %>%
add_trace(x=c(log(input$p0),log(pfu)),y=c(vo,vo),mode="lines",line=list(color="cyan"),name="Effective stress path") %>%
add_trace(x=c(log(input$p0),log(pyp)),y=c(vo,va),mode="lines",line=list(color="black"),name="OAB:Total stress path") %>%
add_trace(x=c(log(pyp),log(ptsp)),y=c(va,vb),mode="lines",line=list(color="black"),name="Total stress path",showlegend=F) %>%
layout(xaxis=list(title="ln p' [kPa]"),yaxis=list(title="v [-]"),
annotations=list(x=c(log(input$p0),log(pyp),log(ptsp),log(input$p0),log(pfu)),y=c(vo,va,vb,va,vo),text=c("O","A","B","C","D"),showarrow=F,xanchor="right"))
})
}
shinyApp(ui,server)
library(shiny)
library(plotly)
library(rootSolve)
ui <- fluidPage(
titlePanel("Original Cam Clay"),
sidebarLayout(
sidebarPanel(sliderInput(inputId = "cp",label = "Initial consolidation pressure [kPa]",min = 1,max = 1000,value = 200),
uiOutput("p0"),
hr(),
sliderInput(inputId = "M",label = "M",min=0.1,max=4,value = 0.95),
sliderInput(inputId = "l",label = "Lambda",min=0.1,max=1,value = 0.2),
sliderInput(inputId = "k",label = "Kappa",min=0.01,max=0.1,value = 0.04,step=0.001),
sliderInput(inputId = "N",label = "N",min=1.5,max=3,value = 2.5),
hr(),
helpText("For questions and comments please contact anil.yildiz@wsl.ch")
),
mainPanel("Isotropically Consolidated Undrained Triaxial Test",
tabsetPanel(type = "tabs",
tabPanel("q - p Plot", plotlyOutput("qpPlot")),
tabPanel("v - ln p Plot",plotlyOutput("vlnpPlot"))
)
)
)
)
server <- function(input, output,session) {
output$p0 <- renderUI({
sliderInput("p0", "Initial confining pressure [kPa]", min=1, max=input$cp, value=100)
})
output$qpPlot <- renderPlotly({
pc <- input$cp
p_ini_yield <- seq(0,pc,1)
q_ini_yield <- input$M*p_ini_yield
qy <- input$M*p_ini_yield*log(pc/p_ini_yield)
eq1 <- function(x){
(((3*x)/(input$M*(input$p0+x)))-log(input$cp/(input$p0+x)))
}
eq2 <- function(y){
3*y-(input$M*(input$p0+y))
}
pyp <- input$p0+(uniroot(eq1,c(0,input$cp))$root)
qyp <- 3*(uniroot(eq1,c(0,input$cp))$root)
ptsp <- input$p0+(uniroot(eq2,c(0,input$cp))$root)
qtsp <- 3*(uniroot(eq2,c(0,input$cp))$root)
vl <- input$l-input$k+input$N
v <- vl - input$l*log(pc)
vo <- v + input$k*log(pc/input$p0)
pfu <- exp((input$N-vo)/input$l)
qfu <- pfu*input$M
qey <- input$M*input$p0*log(pc/input$p0)
plot_ly(x=p_ini_yield,y=qy,type="scatter",mode="none",name="Yield surface",fill="tozeroy",fillcolor="rgba(0,0,0,0.2)") %>%
add_trace(y=q_ini_yield,mode="lines",name="CSL",line=list(color="rgb(256,0,0)"),fill="") %>%
add_trace(x=c(input$p0,pyp),y=c(0,qyp),mode="lines",fill="none",name="OAB: Total \nstress path",line=list(color="rgb(0,1,0)")) %>%
add_trace(x=c(pyp,ptsp),y=c(qyp,qtsp),mode="lines",fill="none",name="",showlegend=F,line=list(color="rgb(0,1,0)")) %>%
add_trace(x=c(input$p0,input$p0),y=c(0,qey),mode="lines",fill="none",name="Effective stress path",line=list(color="cyan")) %>%
add_trace(x=c(input$p0,pfu),y=c(qey,qfu),mode="lines",fill="none",name="Effective stress path",line=list(color="cyan")) %>%
layout(xaxis=list(title="p, p' [kPa]"),yaxis=list(title="q [kPa]"),autosize=T,
annotations=list(x=c(input$p0,pyp,ptsp,input$p0,pfu),y=c(0,qyp,qtsp,qey,qfu),text=c("O","A","B","C","D"),showarrow=F,xanchor="left"))
})
output$vlnpPlot <- renderPlotly({
pc <- input$cp
p_ini <- seq(0,pc,1)
vl <- input$l-input$k+input$N
v_ini_ncl <- vl - input$l*log(p_ini)
v_ini_csl <- input$N-input$l*log(p_ini)
v <- vl - input$l*log(pc)
vo <- v + input$k*log(pc/input$p0)
eq1 <- function(x){
(((3*x)/(input$M*(input$p0+x)))-log(input$cp/(input$p0+x)))
}
eq2 <- function(y){
3*y-(input$M*(input$p0+y))
}
pyp <- input$p0+(uniroot(eq1,c(0,input$cp))$root)
qyp <- 3*(uniroot(eq1,c(0,input$cp))$root)
ptsp <- input$p0+(uniroot(eq2,c(0,input$cp))$root)
qtsp <- 3*(uniroot(eq2,c(0,input$cp))$root)
pfu <- exp((input$N-vo)/input$l)
va <- vo - input$k*(log(pyp/input$p0))
vb <- input$N - input$l*log(ptsp)
plot_ly(x=log(p_ini),y=v_ini_ncl,type="scatter",mode="lines",name="Iso NCL",line=list(color="blue")) %>%
add_trace(y=v_ini_csl,mode="lines",name="CSL",line=list(color="red")) %>%
add_trace(x=c(log(pc),log(input$p0)),y=c(v,vo),mode="lines",line=list(color="green"),name="URL") %>%
add_trace(x=c(log(input$p0),log(pfu)),y=c(vo,vo),mode="lines",line=list(color="cyan"),name="Effective stress path") %>%
add_trace(x=c(log(input$p0),log(pyp)),y=c(vo,va),mode="lines",line=list(color="black"),name="OAB:Total stress path") %>%
add_trace(x=c(log(pyp),log(ptsp)),y=c(va,vb),mode="lines",line=list(color="black"),name="Total stress path",showlegend=F) %>%
layout(xaxis=list(title="ln p' [kPa]"),yaxis=list(title="v [-]"),
annotations=list(x=c(log(input$p0),log(pyp),log(ptsp),log(input$p0),log(pfu)),y=c(vo,va,vb,va,vo),text=c("O","A","B","C","D"),showarrow=F,xanchor="right"))
})
}
shinyApp(ui,server)
deployApp("C:/Users/ayildiz/Desktop/OCC2/OCC-R")
